#!/bin/bash

print_err() {
    red_escape_code='\033[0;31m'
    echo -e "${red_escape_code}${1}"
}


function reviewCycle() {
    param=$1[@]
    files=("${!param}")
    root=$(git rev-parse --show-toplevel 2>&1)
    for basefile in "${files[@]}";
    do
        p_basefile=$(echo "$basefile" | sed s+"$root/"++)
        file="$root/$p_basefile"

        if git ls-files --error-unmatch "$file" > /dev/null 2>&1; then
            VIEWER_CMD="git difftool --tool=vimdiff -y"
            DISCARD_CMD="git restore"
        else
            VIEWER_CMD="bat --paging=always"
            DISCARD_CMD="rm"
            file="$(pwd)/$basefile"
        fi

        echo "$file"
        if [ -f "$file" ]; then
            eval $VIEWER_CMD '"$file"'
        else
            echo "This file has been deleted."
        fi

        ACTION=$(gum choose \
                    --header "What would you like to do with $file?" \
                    "Stage this file" "Discard changes" "Re-run fastgit" "Ignore")
        case $ACTION in
          "Stage this file") git add "$file" ;;
          "Discard changes") gum confirm "Are you sure you want to discard all changes?" && eval $DISCARD_CMD "$file" ;;
          "Re-run fastgit") exec "$0" ;;
           *) ;;
        esac
    done
}

function gumprint() {
    gum style --border normal --padding "0 1" $1
}

function nvimcommit() {
    if [ -z "$NVIM" ]; then
        git commit
    else
        COMMIT_MSG=$(gum write --placeholder "Commit msg (CTRL+D to finish)")
        git commit -m "$COMMIT_MSG"
        gum confirm "Push all local commits?" && git push
        exit 0
    fi
    gum confirm "Push all local commits?" && git push
}

function mainCycle() {
    OVERVIEW=$(git status --porcelain .)
    if [ -z "$OVERVIEW" ]; then
        gumprint "🫶  Nothing to commit!"
        exit 0
    fi
    gumprint "OVERVIEW"
    gum style \
        --border normal \
        --padding "2 4" \
        "$OVERVIEW"

    FILES=$(git diff --name-only)
    if [ -z "$FILES" ]; then
        gumprint "🫶  No changed files!"
    else
        gumprint "🧐 Reviewing changed files..."
        CHOSEN=($(echo "$FILES" | \
            gum choose --no-limit \
            --header "Which changed files would you like to review?"))
        #NOT_CHOSEN=$(echo ${FILES[@]} ${CHOSEN[@]} | tr ' ' '\n' | sort | uniq -u)
        if ! [ -z "$CHOSEN" ]; then
            reviewCycle CHOSEN
        fi
    fi

    UNTRACKED=$(git ls-files --others --exclude-standard)
    if [ -z "$UNTRACKED" ]; then
        gumprint "🫶  No untracked files!"
    else
        gumprint "🚀 Reviewing untracked files..."
        U_CHOSEN=($(echo "$UNTRACKED" | \
                    gum choose \
                        --no-limit \
                        --header "Which untracked files would you like to review?"))
        if [ -z "$U_CHOSEN" ]; then
            echo "Operation canceled!"
            exit 0
        fi
        reviewCycle U_CHOSEN
    fi

    gum style \
        --border normal \
        --padding "2 4" \
        "$(git status)"

    FINAL_ACTION=$(gum choose \
                    --header "What would you like to do now?" \
                    "Commit" "Run again" "Exit")
    case $FINAL_ACTION in
      "Commit") nvimcommit ;;
      "Run again") exec "$0" ;;
       *) exit 0;;
    esac

    gumprint "🎉 Review complete!"
}

# exit if not run in a git repo
git status . > /dev/null 2>&1 || {
    print_err "Hmm, something went wrong. Is this a git repo?"
    exit 1
}
IFS=$'\n'

[ ! "$1"  ] && mainCycle && exit
FILES=$(echo "$@" | sed "s/ /\\n/")
reviewCycle FILES

unset IFS
